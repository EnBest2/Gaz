// Regisztr√°ljuk a service workert PWA m≈±k√∂d√©shez
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/service-worker.js')
    .then(() => console.log('Service Worker regisztr√°lva!'))
    .catch(err => console.log('Service Worker regisztr√°ci√≥ sikertelen:', err));
}

// Alap kateg√≥ri√°k (built-in)
const defaultCategories = [
  { value: "bev√©tel", label: "üí∞ Bev√©tel" },
  { value: "kiad√°s", label: "üõí Kiad√°s" },
  { value: "megtakar√≠t√°s", label: "üè¶ Megtakar√≠t√°s" }
];

// Egy√©ni kateg√≥ri√°k: most objektumok { name: "N√©v", icon: "Emoji" }
let customCategories = JSON.parse(localStorage.getItem("customCategories")) || [];

// Tranzakci√≥k t√°rol√°sa (objektumok: description, amount, category)
let transactions = JSON.parse(localStorage.getItem("transactions")) || [];

/* Egy√©ni kateg√≥ria funkci√≥k */

// √öj egy√©ni kateg√≥ria hozz√°ad√°sa k√©t input alapj√°n: n√©v √©s ikon
function addCategory() {
  const newCatName = document.getElementById("newCategory").value.trim();
  const newCatIcon = document.getElementById("newCategoryIcon").value.trim();
  if (!newCatName || !newCatIcon) return;
  
  // Ellen≈ërz√©s: ha m√°r l√©tezik a default vagy egy√©ni kateg√≥ri√°k k√∂z√∂tt (kisbet≈±s √∂sszehasonl√≠t√°s)
  const existsDefault = defaultCategories.some(cat => cat.value === newCatName.toLowerCase());
  const existsCustom = customCategories.some(cat => cat.name.toLowerCase() === newCatName.toLowerCase());
  if (existsDefault || existsCustom) return;
  
  // Hozz√°ad√°s √©s ment√©s
  customCategories.push({ name: newCatName, icon: newCatIcon });
  localStorage.setItem("customCategories", JSON.stringify(customCategories));
  updateCategoryList();
  
  // ≈∞rlap mez≈ëk t√∂rl√©se
  document.getElementById("newCategory").value = "";
  document.getElementById("newCategoryIcon").value = "";
}

// Friss√≠ti a <select> elemet a kateg√≥ri√°kkal (default + custom)
function updateCategoryList() {
  const categorySelect = document.getElementById("category");
  categorySelect.innerHTML = "";
  
  // Be√©p√≠tett kateg√≥ri√°k hozz√°ad√°sa
  defaultCategories.forEach(cat => {
    const option = document.createElement("option");
    option.value = cat.value;
    option.textContent = cat.label;
    categorySelect.appendChild(option);
  });
  
  // Egy√©ni kateg√≥ri√°k hozz√°ad√°sa (ikon + n√©v)
  customCategories.forEach(cat => {
    const option = document.createElement("option");
    option.value = cat.name;
    option.textContent = `${cat.icon} ${cat.name}`;
    categorySelect.appendChild(option);
  });
}

/* Seg√©df√ºggv√©ny: 
   Ha a kateg√≥ria 'kiad√°s', vagy ha a custom kateg√≥ri√°k k√∂z√∂tt szerepel, akkor expense-k√©nt kezelj√ºk */
function isExpense(categoryValue) {
  if (categoryValue === "kiad√°s") return true;
  return customCategories.some(cat => cat.name === categoryValue);
}

/* Tranzakci√≥k kezel√©se */

// √öj tranzakci√≥ hozz√°ad√°sa
function addTransaction() {
  const description = document.getElementById("description").value.trim();
  const amount = parseFloat(document.getElementById("amount").value);
  const category = document.getElementById("category").value;
  if (!description || isNaN(amount)) return;
  
  transactions.push({ description, amount, category });
  localStorage.setItem("transactions", JSON.stringify(transactions));
  updateUI();
  
  // Input mez≈ëk t√∂rl√©se
  document.getElementById("description").value = "";
  document.getElementById("amount").value = "";
}

// Megtakar√≠t√°sb√≥l kiven√©s: negat√≠v √©rt√©kkel adjuk hozz√°, √©s a "megtakar√≠t√°s" kateg√≥ri√°t haszn√°ljuk
function withdrawSavings() {
  const amount = parseFloat(document.getElementById("withdrawAmount").value);
  if (isNaN(amount)) return;
  
  transactions.push({ description: "üí∏ Megtakar√≠t√°s kivon√°sa", amount: -amount, category: "megtakar√≠t√°s" });
  localStorage.setItem("transactions", JSON.stringify(transactions));
  updateUI();
}

// Friss√≠ti a tranzakci√≥k list√°j√°t, valamint a v√©g√∂sszeget
function updateUI() {
  const transactionsList = document.getElementById("transactions");
  transactionsList.innerHTML = "";
  let total = 0;
  
  transactions.forEach(t => {
    const li = document.createElement("li");
    let displayAmount = t.amount;
    if (isExpense(t.category)) {
      displayAmount = -Math.abs(t.amount);
      total -= Math.abs(t.amount);
    } else {
      total += t.amount;
    }
    
    // Megkeress√ºk a kateg√≥ria megjelen√≠t√©s√©hez az ikont, ha egy√©ni kateg√≥ria
    let categoryDisplay = t.category;
    const customCat = customCategories.find(cat => cat.name === t.category);
    if (customCat) {
      categoryDisplay = `${customCat.icon} ${customCat.name}`;
    } else {
      const defCat = defaultCategories.find(cat => cat.value === t.category);
      if (defCat) categoryDisplay = defCat.label;
    }
    
    li.textContent = `${t.description}: ${displayAmount} Ft (${categoryDisplay})`;
    transactionsList.appendChild(li);
  });
  
  document.getElementById("total").textContent = total;
  updateChart();
}

/* Egyszer≈± k√∂rdiagram rajzol√°sa a <canvas> elemmel */
function updateChart() {
  const canvas = document.getElementById("chart");
  const ctx = canvas.getContext("2d");
  canvas.width = Math.min(400, window.innerWidth - 40);
  canvas.height = canvas.width;
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Csak kiad√°sokat v√°lasztunk ki
  const expenseTransactions = transactions.filter(t => isExpense(t.category));
  
  let totals = {};
  expenseTransactions.forEach(t => {
    if (totals[t.category]) {
      totals[t.category] += Math.abs(t.amount);
    } else {
      totals[t.category] = Math.abs(t.amount);
    }
  });
  
  let totalExpense = Object.values(totals).reduce((sum, val) => sum + val, 0);
  if (totalExpense === 0) {
    ctx.font = "16px Arial";
    ctx.fillStyle = "#333";
    ctx.textAlign = "center";
    ctx.fillText("Nincs el√©g adat a grafikonhoz", canvas.width / 2, canvas.height / 2);
    return;
  }
  
  let startAngle = 0;
  const colors = ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40", "#66FF66", "#FF6666"];
  let colorIndex = 0;
  
  for (let cat in totals) {
    let sliceAngle = (2 * Math.PI * totals[cat]) / totalExpense;
    ctx.beginPath();
    ctx.moveTo(canvas.width / 2, canvas.height / 2);
    ctx.arc(canvas.width / 2, canvas.height / 2, Math.min(canvas.width, canvas.height) / 2 - 20, startAngle, startAngle + sliceAngle);
    ctx.closePath();
    ctx.fillStyle = colors[colorIndex % colors.length];
    ctx.fill();
    
    // Felirat a szelet k√∂zep√©re
    let midAngle = startAngle + sliceAngle / 2;
    let labelX = canvas.width / 2 + (canvas.width / 4) * Math.cos(midAngle);
    let labelY = canvas.height / 2 + (canvas.height / 4) * Math.sin(midAngle);
    ctx.fillStyle = "#000";
    ctx.font = "14px Arial";
    ctx.textAlign = "center";
    ctx.fillText(cat, labelX, labelY);
    
    startAngle += sliceAngle;
    colorIndex++;
  }
}

/* Lapozhat√≥ p√©nz√ºgyi napl√≥ (el≈ëz≈ë, k√∂vetkez≈ë h√≥nap; d√°tumkezel√©s egyszer≈±s√≠tve) */
// Egyszer≈± p√©lda: itt b≈ëv√≠thet≈ë d√°tum kezel√©s, ha sz√ºks√©ges
let currentMonthIndex = new Date().getMonth();
let currentYear = new Date().getFullYear();

function updateDateHeader() {
  const monthNames = ["Janu√°r", "Febru√°r", "M√°rcius", "√Åprilis", "M√°jus", "J√∫nius", "J√∫lius", "Augusztus", "Szeptember", "Okt√≥ber", "November", "December"];
  document.getElementById("currentMonth").textContent = `Aktu√°lis h√≥nap: ${monthNames[currentMonthIndex]} ${currentYear}`;
}

function previousMonth() {
  if (currentMonthIndex === 0) {
    currentMonthIndex = 11;
    currentYear--;
  } else {
    currentMonthIndex--;
  }
  updateDateHeader();
  // Itt lehet sz≈±rni a tranzakci√≥kat d√°tum alapj√°n (a p√©lda egyszer≈±s√≠tett)
}

function nextMonth() {
  if (currentMonthIndex === 11) {
    currentMonthIndex = 0;
    currentYear++;
  } else {
    currentMonthIndex++;
  }
  updateDateHeader();
  // Itt lehet sz≈±rni a tranzakci√≥kat d√°tum alapj√°n (a p√©lda egyszer≈±s√≠tett)
}

/* S√∂t√©t m√≥d v√°lt√°sa */
document.getElementById("toggleMode").addEventListener("click", () => {
  document.body.classList.toggle("dark-mode");
});

/* Inicializ√°ci√≥ */
updateCategoryList();
updateDateHeader();
updateUI();
